{"version":3,"sources":["reportWebVitals.js","actionConstants.js","reducer.js","components/Header/Navigation.js","components/Header/sun-logo.svg","components/Header/Logo.js","components/Header/Header.js","components/Header/index.js","components/Search/SearchBox.js","constants.js","components/Search/Search.js","components/Search/index.js","util.js","components/WeatherInfo/CityForecast.js","components/DayForecast.js","components/WeatherInfo/WeekForecast.js","components/WeatherInfo/WeatherInfo.js","components/WeatherInfo/index.js","components/screens/MainPage.js","components/Favorites/Favorites.js","components/Favorites/index.js","components/screens/FavoritesPage.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TOGGLE_IS_DARK_MODE","TOGGLE_IS_CELSIUS","SELECT_LOCATION_KEY","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","defaultState","isDarkMode","isCelsius","currentLocation","currentCityName","favoritesCities","clientLocation","Navigation","to","process","Logo","style","height","src","sunLogo","className","alt","Header","handleToggleIsDarkMode","handleToggleIsCelsius","onClick","connect","state","dispatch","type","SearchBox","setQuery","handleSelectLocation","autoCompleteOptions","Autocomplete","onKeyUp","event","target","value","id","options","getOptionLabel","option","LocalizedName","Country","width","onChange","newValue","renderInput","params","TextField","label","variant","API_CURRENT_CONDITIONS_URL_BASE","API_KEY1","Search","useState","query","prevQuery","setPrevQuery","setAutoCompleteOptions","useEffect","interval","setInterval","uri","fetch","res","json","clearInterval","payload","Celsius2Fahrenheit","celsiusValue","toFixed","CityForecast","conditionsNow","handleToggleFavorite","isFavorite","units","tempNow","Temperature","Metric","Value","undefined","WeatherText","DayForecast","temperature","day","min","Minimum","max","Maximum","WeekForecast","dailyForecasts","Object","values","map","e","Intl","DateTimeFormat","weekday","format","Date","key","EpochDate","WeatherInfo","handleAddToFavorites","handleRemoveFromFavorites","setDailyForecasts","setConditionsNow","Key","DailyForecasts","catch","console","log","uri_current_conditions","ownProps","locationKey","location","Main","Favorites","favoritesCitiesTemps","setFavoritesCitiesTemps","cityKeysPromise","keys","cityKey","Promise","all","cities","data","cityKeys","newCities","forEach","index","attachTempToCityArray","city","navigate","FavoritesPage","success","useCallback","position","latitude","coords","longitude","uri_geoposition_conditions","navigator","geolocation","getCurrentPosition","error","MainPage","path","store","createStore","action","_location","newState","newFavoritesCities","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a770342.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const TOGGLE_IS_DARK_MODE = \"TOGGLE_IS_DARK_MODE\";\nexport const TOGGLE_IS_CELSIUS = \"TOGGLE_IS_CELSIUS\";\nexport const SELECT_LOCATION_KEY = \"SELECT_LOCATION_KEY\";\nexport const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";","import { \n  TOGGLE_IS_DARK_MODE, \n  TOGGLE_IS_CELSIUS,\n  SELECT_LOCATION_KEY,\n  ADD_TO_FAVORITES,\n  REMOVE_FROM_FAVORITES\n} from \"./actionConstants\";\n\nconst defaultState = {\n  isDarkMode: false,\n  isCelsius: true,\n  currentLocation: null,\n  currentCityName: '',\n  favoritesCities: {},\n  clientLocation: null\n}\n\nexport const reducer = function (state = defaultState, action) {\n  switch (action.type) {\n    case TOGGLE_IS_DARK_MODE:\n      const { isDarkMode } = state;\n      return {...state, isDarkMode: !isDarkMode }; \n    case TOGGLE_IS_CELSIUS:\n      const { isCelsius } = state;\n      return {...state, isCelsius: !isCelsius }; \n    case SELECT_LOCATION_KEY:\n      const { currentLocation } = action.payload;\n      return {...state, currentLocation };\n    case ADD_TO_FAVORITES:\n      {\n        const _location = action.payload.location; // location is a reserved word\n        const newState = {...state};\n        const newFavoritesCities = {...newState.favoritesCities};\n        const cityKey = _location.Key;\n        newFavoritesCities[cityKey] = _location;\n        return {...newState, favoritesCities: newFavoritesCities}\n      }\n    case REMOVE_FROM_FAVORITES:\n      {\n        const { locationKey } = action.payload;\n        const newState = {...state};\n        const newFavoritesCities = {...state.favoritesCities}\n        delete newFavoritesCities[locationKey];\n        return { ...newState, favoritesCities: newFavoritesCities };\n      }\n    default:\n      return state;\n  }\n};\n","import { Link } from \"@reach/router\";\n\nconst Navigation = () => {\n  return (\n    <div>\n      <Link to={process.env.PUBLIC_URL}>Home</Link> |\n      <Link to={`${process.env.PUBLIC_URL}/favorites`}>Favorites</Link>\n    </div>\n  );\n};\n\nexport default Navigation;\n","export default __webpack_public_path__ + \"static/media/sun-logo.0d585ec9.svg\";","import sunLogo from './sun-logo.svg';\n\nconst Logo = () => {\n  return (\n    <img style={ {height: \"100px\"} } src={sunLogo} className=\"App-logo\" alt=\"logo\" />\n  );\n}\n\nexport default Logo;\n","import Navigation from \"./Navigation\";\nimport Logo from \"./Logo\";\n\nconst Header = ({ isDarkMode, isCelsius, handleToggleIsDarkMode, handleToggleIsCelsius }) => {\n  return (\n      <header className=\"logo-header\">\n        <div className=\"title\">\n          Herolo Weather Task\n        </div>\n        <Logo />\n        <div className=\"nav\">\n          <Navigation/>\n          <div onClick={ handleToggleIsDarkMode }>\n            { isDarkMode ? \"Dark\" : \"Light\" }\n          </div>\n          <div onClick={ handleToggleIsCelsius }>\n            { isCelsius ? \"C\" : \"F\" }\n          </div>\n        </div>\n      </header>\n  );\n}\n\nexport default Header;\n","import { connect } from 'react-redux';\nimport Header from './Header';\n\nimport { TOGGLE_IS_DARK_MODE, TOGGLE_IS_CELSIUS } from \"../../actionConstants\";\n\nconst mapStateToProps = state => {\n  const { isDarkMode, isCelsius } = state;\n  return {\n    isDarkMode,\n    isCelsius\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleToggleIsDarkMode: () => dispatch({ type: TOGGLE_IS_DARK_MODE }),\n    handleToggleIsCelsius: () => dispatch({ type: TOGGLE_IS_CELSIUS }),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\n","import TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nconst SearchBox = ({ setQuery, handleSelectLocation, autoCompleteOptions }) => {\n  return (\n    <div className=\"search\">\n      <Autocomplete\n        onKeyUp={(event) => {\n          setQuery(event.target.value);\n        }}\n        id=\"combo-box-demo\"\n        options={autoCompleteOptions}\n        getOptionLabel={(option) => `${option.LocalizedName}, ${option.Country.LocalizedName}`}\n        style={{ width: 300 }}\n        onChange={(event, newValue) => {\n          handleSelectLocation(newValue);\n        }}\n        renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","export const API_CURRENT_CONDITIONS_URL_BASE =\n  \"https://dataservice.accuweather.com/currentconditions/v1\";\nexport const API_FORECASTS_5_DAYS_URL_BASE =\n  \"https://dataservice.accuweather.com/forecasts/v1/daily/5day\";\nexport const API_AUTO_COMPLETE_BASE =\n  \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete\";\nexport const API_GEOPOSITION_BASE =\n  \"https://dataservice.accuweather.com/locations/v1/cities/geoposition/search\";\n// Change keys if number of calls per days exceeded quanta\nexport const API_KEY7 = `JmVIFm5N5S9A6D5BnIBp0ah5tVJIg9GA`;\nexport const API_KEY2 = \"L4XQxeAAeKSSx0AfIcOyQLi1mD9htWe5\";\nexport const API_KEY1 = \"jCLPUDFqHDZV7369qCF3gfHGutmpcVKG\";\nexport const API_KEY4 = `vJvpSEzy3aG3nRuNhrMeVnhBeDSj7JFK`;\nexport const API_KEY3 = `cNJ6YSXkDrtUrElsVG1kMQMvLrFK4xAg`;\nexport const API_KEY5 = \"eOYiiAjNR0EuRaIGNoxAlXQQLn56cQMb\";\nexport const API_KEY6 = \"KrnJm3pGAtha40EFim82KLEqvaikzMeS\";\n","import { useEffect, useState } from \"react\";\nimport SearchBox from \"./SearchBox\";\nimport { API_KEY1, API_AUTO_COMPLETE_BASE } from \"../../constants\";\n\nconst Search = ({ currentLocation, handleSelectLocation }) => {\n  const [query, setQuery] = useState(\"\");\n  const [prevQuery, setPrevQuery] = useState(null);\n  const [autoCompleteOptions, setAutoCompleteOptions] = useState([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const uri = `${API_AUTO_COMPLETE_BASE}?apikey=${API_KEY1}&q=${query}`;\n      if (query !== prevQuery && query) {\n        fetch(uri)\n          .then((res) => res.json())\n          .then((res) => {\n            setAutoCompleteOptions(res);\n          });\n      }\n      setPrevQuery(query);\n    }, 1000);\n    // Every key up rerenders\n    return () => clearInterval(interval);\n  }, [query, prevQuery]);\n\n  return (\n    <div className=\"search\">\n      <SearchBox {...{ setQuery, handleSelectLocation, autoCompleteOptions }} />\n    </div>\n  );\n};\n\nexport default Search;\n","import { connect } from 'react-redux';\nimport Search from './Search';\nimport { SELECT_LOCATION_KEY } from \"../../actionConstants\";\n\nconst mapStateToProps = state => {\n  const { currentLocation } = state;\n  return {\n    currentLocation\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSelectLocation: (currentLocation) => dispatch({ type: SELECT_LOCATION_KEY, payload: { currentLocation }}),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\n\n","export const Celsius2Fahrenheit = (celsiusValue) => {\n  const f = celsiusValue * 1.8 + 32;\n  return f.toFixed(2);\n}","import { Celsius2Fahrenheit } from \"../../util\";\n\nconst CityForecast = ({ isCelsius, currentLocation, conditionsNow, handleToggleFavorite, isFavorite }) => {\n  const units = isCelsius ? \"C\" : \"F\";\n  const tempNow = conditionsNow?.Temperature?.Metric?.Value;\n  return (\n    <div className=\"city-forecast\">\n      <div className=\"weather-now\">\n        <div className=\"city-weather\">\n          <span>\n            {currentLocation?.LocalizedName}\n          </span>\n          <div>\n            {isCelsius ? tempNow : Celsius2Fahrenheit(tempNow)}° {units}\n          </div>\n        </div>\n        {/* in favorites page do not display ♡ heart */}\n        { isFavorite !== undefined && (\n          <div onClick={() => { handleToggleFavorite(currentLocation)}}>\n                  { isFavorite ? \"❤️\" : \"♡\" }\n          </div>\n        )}\n      </div>\n      <h1 className=\"today-sky\">{conditionsNow?.WeatherText}</h1>\n    </div>\n  );\n}\n\nexport default CityForecast;\n","import { Celsius2Fahrenheit } from \"../util\";\n\nconst DayForecast = ({ isCelsius, temperature, day }) => {\n  const units = isCelsius ? \"C\" : \"F\";\n  const min = temperature?.Minimum.Value;\n  const max = temperature?.Maximum.Value;\n  return (\n    <div className=\"day-forecast\">\n      <h4>\n        {day}\n      </h4>\n      <div className=\"temp\">\n        Minimum: {isCelsius ? min : Celsius2Fahrenheit(min)}° {units}\n      </div>\n      <div className=\"temp\">\n        Maximum: {isCelsius ? max : Celsius2Fahrenheit(max)}° {units}\n      </div>\n    </div>\n  );\n}\n\nexport default DayForecast;\n","import DayForecast from \"../DayForecast\";\n\nconst WeekForecast = ({ dailyForecasts, isCelsius }) => {\n  return (\n      <div className=\"week-forecast\">\n        {\n          dailyForecasts && Object.values(dailyForecasts).map(e => {\n            const temperature = e.Temperature;\n            const day = new Intl.DateTimeFormat('en-US', { weekday: 'long'}).format(new Date(e.Date));\n            const key= e.EpochDate; // a unique key\n            return (\n            <DayForecast key={key} isCelsius={isCelsius} day={day} temperature={temperature} />\n          )})\n        }\n      </div>\n  );\n}\n\nexport default WeekForecast;\n","import { useEffect, useState } from \"react\";\nimport CityForecast from \"./CityForecast\";\nimport WeekForecast from \"./WeekForecast\";\nimport { API_CURRENT_CONDITIONS_URL_BASE, API_FORECASTS_5_DAYS_URL_BASE, API_KEY1 } from \"../../constants\";\n\nconst WeatherInfo = ({ currentLocation, handleAddToFavorites, handleRemoveFromFavorites, isFavorite, isCelsius }) => {\n  const [ dailyForecasts, setDailyForecasts ] = useState([]);\n  const [ conditionsNow, setConditionsNow ] = useState({});\n\n  const handleToggleFavorite = () => {\n    isFavorite ? handleRemoveFromFavorites(currentLocation.Key) : handleAddToFavorites(currentLocation)\n  }\n\n  useEffect(() => {\n    if(currentLocation) {\n      const uri = `${API_FORECASTS_5_DAYS_URL_BASE}/${currentLocation.Key}?apikey=${API_KEY1}&metric=true`;\n      fetch(uri)\n      .then(res => res.json()).then(res => {\n        setDailyForecasts(res.DailyForecasts);\n      }).catch(e => console.log(e));\n\n      const uri_current_conditions = `${API_CURRENT_CONDITIONS_URL_BASE}/${currentLocation.Key}?apikey=${API_KEY1}&metric=true`;\n      fetch(uri_current_conditions)\n      .then(res => res.json()).then(res => {\n        setConditionsNow(res[0]);\n      }).catch(e => { console.log(e)});\n    }\n  }, [currentLocation])\n\n  return (\n    <div className=\"weather-info-container\">\n      <div className=\"weather-info\">\n        <CityForecast handleToggleFavorite={handleToggleFavorite} isFavorite={isFavorite} handleAddToFavorites={handleAddToFavorites} conditionsNow={conditionsNow} isCelsius={isCelsius} currentLocation={currentLocation} />\n        <WeekForecast {...{dailyForecasts, isCelsius} }/>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherInfo;\n","import { connect } from 'react-redux';\nimport WeatherInfo from './WeatherInfo';\nimport { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from \"../../actionConstants\";\n\nconst mapStateToProps = state => {\n  const { currentLocation, isCelsius } = state;\n  const cityKey = currentLocation?.Key;\n  const isFavorite = cityKey in state.favoritesCities;\n  return {\n    currentLocation,\n    isFavorite,\n    isCelsius\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    handleRemoveFromFavorites: (locationKey) => dispatch({ type: REMOVE_FROM_FAVORITES, payload: { locationKey } }),\n    handleAddToFavorites: (location) => dispatch({ type: ADD_TO_FAVORITES, payload: { location } })\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherInfo);\n\n","import Search from \"../Search\";\nimport WeatherInfo from \"../WeatherInfo\";\n\n/* Main Screen */\n\nconst Main = () => {\n  return (\n    <div className=\"App\">\n      <Search />\n      <WeatherInfo />\n    </div>\n  );\n};\n\nexport default Main;\n","import { useState, useEffect } from \"react\";\nimport CityForecast from \"../WeatherInfo/CityForecast\";\nimport { navigate } from \"@reach/router\";\nimport { API_CURRENT_CONDITIONS_URL_BASE, API_KEY1 } from \"../../constants\";\n\nconst attachTempToCityArray = (cities, data) => {\n  const cityKeys = Object.keys(cities);\n  const newCities = { ...cities };\n  cityKeys.forEach((key, index) => {\n    newCities[key].conditionsNow = data[index][0];\n  });\n  return newCities;\n};\n\nconst Favorites = ({ favoritesCities, isCelsius, handleSelectLocation }) => {\n  const [favoritesCitiesTemps, setFavoritesCitiesTemps] =\n    useState(favoritesCities);\n  useEffect(() => {\n    const cityKeys = Object.keys(favoritesCities);\n    const cityKeysPromise = cityKeys.map((cityKey) => {\n      const uri_current_conditions = `${API_CURRENT_CONDITIONS_URL_BASE}/${cityKey}?apikey=${API_KEY1}&metric=true`;\n      return fetch(uri_current_conditions)\n        .then((res) => res.json())\n        .catch((e) => {\n          console.log(e);\n        });\n    });\n\n    Promise.all(cityKeysPromise).then((values) => {\n      setFavoritesCitiesTemps(attachTempToCityArray(favoritesCities, values));\n    });\n  }, [favoritesCities]);\n\n  return (\n    <div className=\"favorites\">\n      <h1>Your favorites cities</h1>\n      <div>\n        {Object.values(favoritesCitiesTemps).map((city) => {\n          return (\n            <div\n              onClick={() => {\n                handleSelectLocation(city);\n                navigate(process.env.PUBLIC_URL);\n              }}\n            >\n              <CityForecast\n                key={city.Key}\n                conditionsNow={city.conditionsNow}\n                isCelsius={isCelsius}\n                currentLocation={city}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Favorites;\n","import { connect } from 'react-redux';\nimport Favorites from './Favorites';\nimport { SELECT_LOCATION_KEY } from \"../../actionConstants\";\n\nconst mapStateToProps = state => {\n  const { favoritesCities, isCelsius } = state;\n  return {\n    favoritesCities,\n    isCelsius\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSelectLocation: (currentLocation) => dispatch({ type: SELECT_LOCATION_KEY, payload: { currentLocation }}),\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n\n","import Favorites from \"../Favorites/\";\n\n/* Favorites Screen */\n\nconst FavoritesPage = () => {\n  return (\n    <div className=\"App\">\n      <Favorites />\n    </div>\n  );\n};\n\nexport default FavoritesPage;\n","import \"./App.css\";\nimport { useEffect, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"./components/Header\";\nimport MainPage from \"./components/screens/MainPage\";\nimport FavoritesPage from \"./components/screens/FavoritesPage\";\nimport { API_GEOPOSITION_BASE, API_KEY1 } from \"./constants\";\nimport { Router } from \"@reach/router\";\nimport { SELECT_LOCATION_KEY } from \"./actionConstants\";\n\n/* This is the App component\n It hosts the Router which sets the current \nscreen(MainPage/FavoritesPage) based on the URL\nIt also handles the current location weather (geoposition)\n */\n\nconst mapStateToProps = (state) => {\n  const { isDarkMode } = state;\n  return {\n    isDarkMode,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleSelectLocation: (currentLocation) =>\n      dispatch({ type: SELECT_LOCATION_KEY, payload: { currentLocation } }),\n  };\n};\n\nfunction App({ isDarkMode, handleSelectLocation }) {\n  const success = useCallback(\n    (position) => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n\n      const uri_geoposition_conditions = `${API_GEOPOSITION_BASE}?apikey=${API_KEY1}&q=${latitude},${longitude}`;\n      fetch(uri_geoposition_conditions)\n        .then((res) => res.json())\n        .then((res) => {\n          handleSelectLocation(res);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n    [handleSelectLocation]\n  );\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      console.log(\"Geolocation is not supported by your browser\");\n    } else {\n      navigator.geolocation.getCurrentPosition(success, (error) =>\n        console.log(error)\n      );\n    }\n  }, [success]);\n\n  return (\n    <div className={isDarkMode ? \"dark-mode\" : \"\"}>\n      <Header />\n      <Router>\n        <MainPage path={process.env.PUBLIC_URL} />\n        <FavoritesPage path={`${process.env.PUBLIC_URL}/favorites`} />\n      </Router>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { reducer } from \"./reducer\";\nimport App from \"./App\";\nimport \"./index.css\";\n\n// This is the entrance to the app\n// It wrapps the App component with the data store\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}